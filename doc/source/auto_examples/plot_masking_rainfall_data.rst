
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_masking_rainfall_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_masking_rainfall_data.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_masking_rainfall_data.py:


Generalized Parafac with missing values
===============================================
On this page, you will find examples showing how to handle missing data with Generalized CP (GCP).

.. GENERATED FROM PYTHON SOURCE LINES 8-11

Introduction
-----------------------
Missing values can be handled through GCP decomposition by masking them.

.. GENERATED FROM PYTHON SOURCE LINES 11-40

.. code-block:: default


    from tlgcp import generalized_parafac
    from tlgcp.data import get_tensor
    from tensorly.metrics import RMSE
    import numpy as np
    import tensorly as tl
    import time
    from tensorly.decomposition import non_negative_parafac_hals
    import matplotlib.pyplot as plt


    def each_iteration(a, title):
        fig = plt.figure()
        fig.set_size_inches(10, fig.get_figheight(), forward=True)
        plt.plot(a)
        plt.title(str(title))
        plt.yscale('log')
        plt.legend(['gcp'], loc='upper right')


    def plot_components(f, title):
        fig, axs = plt.subplots(5, 3)
        for j in range(5):
            fig.set_size_inches(15, fig.get_figheight(), forward=True)
            fig.suptitle(str(title))
            axs[j, 0].bar(np.arange(36), height=f[0][:, j], color='r')
            axs[j, 1].plot(f[1][:, j], 'o-')
            axs[j, 2].bar(np.arange(12), height=f[2][:, j], color='b')








.. GENERATED FROM PYTHON SOURCE LINES 41-44

Here, we use india rainfall dataset which has some missing values in it.
If data doesn't come with a mask, we need to create it ourselves e.g. by searching
the nan values in data.

.. GENERATED FROM PYTHON SOURCE LINES 44-56

.. code-block:: default



    tensor = get_tensor("rainfall")
    mask = tl.ones(tl.shape(tensor))
    mask[np.isnan(tensor)] = 0
    tensor[np.isnan(tensor)] = 0

    # Parameters
    rank = 5
    init = 'random'
    loss = 'gaussian'








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Both GCP and SGCP allow us to use mask. Here, we will use only GCP.

.. GENERATED FROM PYTHON SOURCE LINES 58-85

.. code-block:: default


    # GCP
    tic = time.time()
    tensorgcp, errorsgcp = generalized_parafac(tensor, rank=rank, init=init, return_errors=True, loss=loss,
                                               mask=mask, n_iter_max=100)
    weightsgcp, factorsgcp = tensorgcp
    cp_reconstructiongcp = tl.cp_to_tensor((weightsgcp, factorsgcp))
    time_gcp = time.time() - tic

    # NN-Parafac
    tic = time.time()
    tensorcp, errors = non_negative_parafac_hals(tensor, rank=rank, n_iter_max=100, init=init, return_errors=True)
    weights, factors = tensorcp
    cp_reconstruction = tl.cp_to_tensor((weights, factors))
    time_cp = time.time() - tic

    each_iteration(errorsgcp, "GCP")

    each_iteration(errors, "NN-HALS")


    print("RMSE for GCP:", RMSE(tensor, cp_reconstructiongcp))
    print("RMSE for NN-CP:", RMSE(tensor, cp_reconstruction))

    print("GCP time:", time_gcp)
    print("NN-CP time:", time_cp)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_001.png
         :alt: GCP
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_002.png
         :alt: NN-HALS
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    RMSE for GCP: 68.13162666364799
    RMSE for NN-CP: 69.20314856218323
    GCP time: 0.3781435489654541
    NN-CP time: 0.5225670337677002




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Here, we plot components of the factors for interpretation.
Here GCP components,

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: default


    plot_components(factorsgcp, 'GCP')




.. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_003.png
   :alt: GCP
   :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-93

and NN-CP components;

.. GENERATED FROM PYTHON SOURCE LINES 93-95

.. code-block:: default


    plot_components(factors, 'NN-Parafac')



.. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_004.png
   :alt: NN-Parafac
   :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.968 seconds)


.. _sphx_glr_download_auto_examples_plot_masking_rainfall_data.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_masking_rainfall_data.py <plot_masking_rainfall_data.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_masking_rainfall_data.ipynb <plot_masking_rainfall_data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
