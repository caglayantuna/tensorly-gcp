
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_masking_rainfall_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_masking_rainfall_data.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_masking_rainfall_data.py:


Generalized Parafac with missing values
===============================================
On this page, you will find examples showing how to handle missing data with Generalized CP (GCP).

.. GENERATED FROM PYTHON SOURCE LINES 8-11

Introduction
-----------------------
Some data could have missing values in it.

.. GENERATED FROM PYTHON SOURCE LINES 11-79

.. code-block:: default


    from tlgcp import generalized_parafac
    from tlgcp.data import get_tensor
    from tensorly.metrics import RMSE
    import numpy as np
    import tensorly as tl
    import time
    from tensorly.decomposition import non_negative_parafac_hals
    import matplotlib.pyplot as plt


    def each_iteration(a, title):
        fig = plt.figure()
        fig.set_size_inches(10, fig.get_figheight(), forward=True)
        plt.plot(a)
        plt.title(str(title))
        plt.yscale('log')
        plt.legend(['gcp'], loc='upper right')


    def plot_components(f, title):
        for j in range(5):
            fig, (ax1, ax2, ax3) = plt.subplots(1, 3)
            fig.set_size_inches(15, fig.get_figheight(), forward=True)
            fig.suptitle(str(title) + ' ' + 'Rank' + ' ' + str(j+1))
            ax1.bar(np.arange(36),height=f[0][:, j], color='r')
            ax2.plot(f[1][:, j], 'o-')
            ax3.bar(np.arange(12), height=f[2][:, j], color='b')


    tensor = get_tensor("rainfall")
    mask = tl.ones(tl.shape(tensor))
    mask[np.isnan(tensor)] = 0
    tensor[np.isnan(tensor)] = 0

    # Parameters
    rank = 5
    init = 'random'
    loss = 'gaussian'

    # GCP
    tic = time.time()
    tensorgcp, errorsgcp = generalized_parafac(tensor, rank=rank, init=init, return_errors=True, loss=loss,
                                               mask=mask, n_iter_max=100)
    weightsgcp, factorsgcp = tensorgcp
    cp_reconstructiongcp = tl.cp_to_tensor((weightsgcp, factorsgcp))
    time_gcp = time.time() - tic

    # NN-Parafac
    tic = time.time()
    tensorcp, errors = non_negative_parafac_hals(tensor, rank=rank, n_iter_max=100, init=init, return_errors=True)
    weights, factors = tensorcp
    cp_reconstruction = tl.cp_to_tensor((weights, factors))
    time_cp = time.time() - tic

    each_iteration(errorsgcp, "GCP")

    each_iteration(errors, "NN-HALS")


    print("RMSE for GCP:", RMSE(tensor, cp_reconstructiongcp))
    print("RMSE for NN-CP:", RMSE(tensor, cp_reconstruction))

    print("GCP time:", time_gcp)
    print("NN-CP time:", time_cp)

    plot_components(factorsgcp, 'GCP')
    plot_components(factors, 'NN-Parafac')



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_001.png
         :alt: GCP
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_002.png
         :alt: NN-HALS
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_003.png
         :alt: GCP Rank 1
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_004.png
         :alt: GCP Rank 2
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_005.png
         :alt: GCP Rank 3
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_006.png
         :alt: GCP Rank 4
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_007.png
         :alt: GCP Rank 5
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_008.png
         :alt: NN-Parafac Rank 1
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_009.png
         :alt: NN-Parafac Rank 2
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_010.png
         :alt: NN-Parafac Rank 3
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_011.png
         :alt: NN-Parafac Rank 4
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_012.png
         :alt: NN-Parafac Rank 5
         :srcset: /auto_examples/images/sphx_glr_plot_masking_rainfall_data_012.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    RMSE for GCP: 68.15340372966595
    RMSE for NN-CP: 68.98924038972825
    GCP time: 0.24031949043273926
    NN-CP time: 0.2613644599914551





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.000 seconds)


.. _sphx_glr_download_auto_examples_plot_masking_rainfall_data.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_masking_rainfall_data.py <plot_masking_rainfall_data.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_masking_rainfall_data.ipynb <plot_masking_rainfall_data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
